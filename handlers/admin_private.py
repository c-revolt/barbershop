from aiogram import F, Router, types
from aiogram.filters import Command, StateFilter, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from sqlalchemy.ext.asyncio import AsyncSession
from database.orm_query import orm_add_service, orm_get_services, orm_delete_service, orm_get_service, \
    orm_update_service, orm_add_barber, orm_update_barber

from filters.chat_types import ChatTypeFilter, IsAdmin
from keyboards.reply import admin_kb, main_menu_kb
from keyboards.inline import get_callback_btns

import logging

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

admin_private_router = Router()
admin_private_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())


class AddService(StatesGroup):
    name = State()
    price = State()
    time = State()

    service_for_change = None
    texts = {
        'AddService:name': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:',
        'AddService:price': '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω–æ–≤–æ:',
        'AddService:time': '–≠—Ç–æ—Ç —Å—Ç–µ–π—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π, –ø–æ—ç—Ç–æ–º—É...',
    }


class AddBarber(StatesGroup):
    name = State()
    description = State()
    photo = State()
    earnings = None
    completed_jobs = None

    barber_for_change = None
    texts = {
        'AddBarber:name': '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∑–∞–Ω–æ–≤–æ:',
        'AddBarber:description': '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:',
        'AddBarber:photo': '–≠—Ç–æ—Ç —Å—Ç–µ–π—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π, –ø–æ—ç—Ç–æ–º—É...',
    }


@admin_private_router.message(Command("admin"))
async def add_service(message: types.Message):
    await message.answer(f"{message.from_user.first_name}, –≤—ã –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                         reply_markup=admin_kb)


@admin_private_router.message(F.text.lower() == "—É—Å–ª—É–≥–∏")
async def starring_at_service(message: types.Message, session: AsyncSession):
    for service in await orm_get_services(session):
        await message.answer(
            text=f"üíà {round(service.price, 0)} ‚ÇΩ <strong>|</strong> "
                 f"{service.name} <strong>|</strong> "
                 f"{service.time}",
            reply_markup=get_callback_btns(btns={
                "üóë –£–¥–∞–ª–∏—Ç—å": f"delete_{service.id}",
                "üñå –ò–∑–º–µ–Ω–∏—Ç—å": f"change_{service.id}"
            })
        )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É")


@admin_private_router.callback_query(F.data.startswith('delete_'))
async def delete_service(callback: types.CallbackQuery, session: AsyncSession):
    service_id = callback.data.split("_")[-1]
    await orm_delete_service(session, int(service_id))

    await callback.answer("–£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞", show_alert=True)
    await callback.message.answer("–£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞!")


@admin_private_router.callback_query(StateFilter(None), F.data.startswith("change_"))
async def change_service(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    serivce_id = callback.data.replace("change_", "")
    service_for_change = await orm_get_service(session, int(serivce_id))

    AddService.service_for_change = service_for_change
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(AddService.name)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –£–°–õ–£–ì–ò (FSM)
@admin_private_router.message(StateFilter(None), F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É")
async def add_service(message: types.Message, state: FSMContext):
    await message.answer(
        "ü™ß –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:", reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(AddService.name)


@admin_private_router.message(StateFilter("*"), Command("–æ—Ç–º–µ–Ω–∞"))
@admin_private_router.message(StateFilter("*"), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return
    if AddService.service_for_change:
        AddService.service_for_change = None
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=admin_kb)


@admin_private_router.message(StateFilter("*"), Command("–Ω–∞–∑–∞–¥"))
@admin_private_router.message(StateFilter("*"), F.text.casefold() == "–Ω–∞–∑–∞–¥")
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state == AddService.name:
        await message.answer('–ü—Ä–µ–¥—ã–¥—É—à–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç. –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"')

    previos = None
    for step in AddService.__all_states__:
        if step.state == current_state:
            await state.set_state(previos)
            await message.answer(f"–û–∫, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É,\n{AddService.texts[previos.state]}")
            return
        previos = step


@admin_private_router.message(AddService.name, or_f(F.text, F.text == "."))
async def add_name(message: types.Message, state: FSMContext):
    if message.text == ".":
        await state.update_data(name=AddService.service_for_change.name)
    else:
        if len(message.text) >= 29:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 29 —Å–∏–º–≤–æ–ª–æ–≤. \n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
            return

        await state.update_data(name=message.text)
    await message.answer("üí∑ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —É—Å–ª—É–≥–∏:")
    await state.set_state(AddService.price)


@admin_private_router.message(AddService.name)
async def add_name_second(message: types.Message):
    await message.answer("–£–ø—Å! –í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç <b>–ù–ê–ó–í–ê–ù–ò–Ø</b> —É—Å–ª—É–≥–∏.")


@admin_private_router.message(AddService.price, or_f(F.text, F.text == "."))
async def add_price(message: types.Message, state: FSMContext):
    if message.text == ".":
        await state.update_data(price=AddService.service_for_change.price)
    else:
        try:
            float(message.text)
        except:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã.")
            return
        await state.update_data(price=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –æ–∫–∞–∑–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <strong>1—á</strong> "
                         "–∏–ª–∏ <strong>30–º</strong>. –í–≤–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ 3 —Å–∏–º–≤–æ–ª–æ–≤.")
    await state.set_state(AddService.time)


@admin_private_router.message(AddService.price)
async def add_price_second(message: types.Message):
    await message.answer("–£–ø—Å! –í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–µ–¥–∏—Ç–µ <strong>–¶–ï–ù–£</strong> —É—Å–ª—É–≥–∏.")


@admin_private_router.message(AddService.time, or_f(F.text, F.text == "."))
async def add_time(message: types.Message, state: FSMContext, session: AsyncSession):
    if message.text == ".":
        await state.update_data(time=AddService.service_for_change.time)
    else:
        if len(message.text) > 3:
            await message.answer("–í—Ä–µ–º—è –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
        await state.update_data(time=message.text)
    data = await state.get_data()
    try:
        if AddService.service_for_change:
            await orm_update_service(session, AddService.service_for_change.id, data)
        else:
            await orm_add_service(session, data)
        await message.answer("–£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞/–∏–∑–º–µ–Ω–µ–Ω–∞ üëå", reply_markup=admin_kb)
        await state.clear()

    except Exception as e:
        await message.answer(f"–û–®–ò–ë–ö–ê!\n{str(e)}\n"
                             f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –±–æ—Ç–∞!", reply_markup=admin_kb)
        await state.clear()
    # print(data)

    AddService.service_for_change = None


@admin_private_router.message(AddService.time)
async def add_time_second(message: types.Message):
    await message.answer("–£–ø—Å! –í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–µ–¥–∏—Ç–µ <b>–í–†–ï–ú–Ø</b> –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏.")


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ë–ê–†–ë–ï–†–ê (FSM)
@admin_private_router.message(StateFilter(None), F.text == "üë®‚Äçü¶∞ –î–æ–±–∞–≤–∏—Ç—å –±–∞—Ä–±–µ—Ä–∞")
async def add_barber(message: types.Message, state: FSMContext):
    await message.answer(
        "ü™ß –í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –±–∞—Ä–±–µ—Ä–∞:", reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(AddBarber.name)


@admin_private_router.message(AddBarber.name, or_f(F.text, F.text == "."))
async def add_barber_name(message: types.Message, state: FSMContext):
    if message.text == ".":
        await state.update_data(name=AddBarber.barber_for_change.name)
    else:
        if len(message.text) >= 29:
            await message.answer("–ò–º—è –±–∞—Ä–±–µ—Ä–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 15 —Å–∏–º–≤–æ–ª–æ–≤. \n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∑–∞–Ω–æ–≤–æ.")
            return

        await state.update_data(name=message.text)
    await message.answer("–ö–æ—Ä–æ—Ç–∫–æ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç—É –æ–± —ç—Ç–æ–º –±–∞—Ä–±–µ—Ä–µ.")
    await state.set_state(AddBarber.description)


@admin_private_router.message(AddBarber.name)
async def add_barber_name_second(message: types.Message):
    await message.answer("–£–ø—Å! –í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–µ–¥–∏—Ç–µ <b>–ò–ú–Ø</b> –±–∞—Ä–±–µ—Ä–∞.")


# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ description –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ price
@admin_private_router.message(AddBarber.description, or_f(F.text, F.text == "."))
async def add_barber_description(message: types.Message, state: FSMContext):
    if message.text == ".":
        await state.update_data(description=AddBarber.barber_for_change.description)
    else:
        await state.update_data(description=message.text)
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∫—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ç–æ –±–∞—Ä–±–µ—Ä–∞.")
    await state.set_state(AddBarber.photo)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è description
@admin_private_router.message(AddBarber.description)
async def add_barber_description_second(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω–æ–≤–æ")


# @admin_private_router.message(AddBarber.earnings, or_f(F.text, F.text == "."))
# async def add_barber_earnings(message: types.Message, state: FSMContext):
#     if message.text == ".":
#         await state.update_data(earnings=AddBarber.barber_for_change.earnings)
#     else:
#         try:
#             float(message.text)
#         except:
#             await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –±–∞—Ä–±–µ—Ä–æ–º –¥–µ–Ω–µ–≥. "
#                                  "–ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—å 0, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –Ω–∞ —Å—Ç–∞—Ä—Ç–µ.")
#             return
#         await state.update_data(earniings=message.text)
#     await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –±–∞—Ä–±–µ—Ä–æ–º —Ä–∞–±–æ—Ç. –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç, —É–∫–∞–∂–∏—Ç–µ 0.")
#     await state.set_state(AddBarber.completed_jobs)
#
#
# @admin_private_router.message(AddBarber.earnings)
# async def add_barber_earnings_second(message: types.Message, state: FSMContext):
#     await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É –∑–∞–Ω–æ–≤–æ.")


# @admin_private_router.message(AddBarber.completed_jobs, or_f(F.text, F.text == "."))
# async def add_barber_completed_jobs(message, state: FSMContext, session: AsyncSession):
#     if message.text == ".":
#         await state.update_data(completed_jobs=AddBarber.barber_for_change.completed_jobs)
#     else:
#         try:
#             int(message.text)
#         except:
#             await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–∞–∑–∞–Ω–Ω—ã—Ö –±–∞—Ä–±–µ—Ä–æ–º —É—Å–ª—É–≥ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
#             return
#         await state.update_data(completed_jobs=message.text)
#     await message.answer("–î–û–±–∞–≤—å—Ç–µ –∫—Ä–∞—Å–∏–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–∞—Ä–±–µ—Ä–∞.")
#     await state.set_state(AddBarber.photo)


# earnings

# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è photo –∏ –ø–æ—Ç–æ–º –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@admin_private_router.message(AddBarber.photo, or_f(F.photo, F.text == "."))
async def add_photo(message: types.Message, state: FSMContext, session: AsyncSession):
    if message.text and message.text == ".":
        await state.update_data(photo=AddBarber.barber_for_change.photo)

    else:
        await state.update_data(photo=message.photo[-1].file_id)
    data = await state.get_data()

    data['description'] = data.get('description', '')
    # logging.debug(f'DESCRIPTION {data["description"]}')

    data['photo'] = data.get('photo', '')
    # logging.debug(f'PHOTO {data["photo"]}')

    data['earnings'] = data.get('earnings', 0.0)
    data['completed_jobs'] = data.get('completed_jobs', 0)

    try:
        if AddBarber.barber_for_change:
            await orm_update_barber(session, AddBarber.barber_for_change.id, data)
        else:
            await orm_add_barber(session, data)
        await message.answer("–ë–∞—Ä–±–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω/–∏–∑–º–µ–Ω–µ–Ω", reply_markup=admin_kb)
        await state.clear()

    except Exception as e:
        await message.answer(
            f"–û—à–∏–±–∫–∞: \n{str(e)}\n–û–±—Ä–∞—Ç–∏—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ—Ä—É, –æ–Ω –æ–ø—è—Ç—å –¥–µ–Ω–µ–≥ —Ö–æ—á–µ—Ç",
            reply_markup=admin_kb,
        )
        await state.clear()

    AddBarber.barber_for_change = None


@admin_private_router.message(AddBarber.photo)
async def add_photo_second(message: types.Message, state: FSMContext):
    await message.answer("–ù–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–∞—Ä–±–µ—Ä–∞.")


@admin_private_router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: types.Message):
    await message.answer(text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_kb)
