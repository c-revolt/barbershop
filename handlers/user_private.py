from aiogram import F, Router, types
from aiogram.filters import CommandStart, Command, or_f
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from database.orm_query import orm_get_services, orm_get_barbers
from filters.chat_types import ChatTypeFilter
from keyboards.inline import get_menu_callback_btns
from keyboards.reply import main_menu_kb

user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))


@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–∞—Ä–±–µ—Ä—à–æ–ø!",
        reply_markup=main_menu_kb
    )


@user_private_router.message(F.text.lower() == "üíà —É—Å–ª—É–≥–∏ üíà")
@user_private_router.message(Command("services"))
async def get_services(message: types.Message, session: AsyncSession):
    services = await orm_get_services(session)
    if (services):
        for service in services:
            await message.answer(f"üíµ <strong>{round(service.price, 0)} ‚ÇΩ</strong>  |  üïò {service.time}\n"
                                 f"üíà {service.name} üíà\n\n"
                                 f"‚û°Ô∏è –¢—É—Ç –±—É–¥–µ—Ç –Ω–µ–±–æ–ª—å—à–æ–µ –∫—Ä–∞—Å–∏–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏, "
                                 f"–∫–æ—Ç–æ—Ä–æ–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫–∏–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –ø—Ä–æ—á–µ–µ.\n\n",
                                 reply_markup=get_menu_callback_btns(
                                     btns={f"–í—ã–±—Ä–∞—Ç—å": f"select_services_{service.id}"}))
    else:
        await message.answer(text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É—Å–ª—É–≥ –ø–æ–∫–∞ –Ω–µ—Ç. –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!')


@user_private_router.message(F.text.lower() == "‚úÇÔ∏è –±–∞—Ä–±–µ—Ä—ã ‚úÇÔ∏è")
@user_private_router.message(Command("barbers"))
async def get_barbers(message: types.Message, session: AsyncSession):
    barbers = await orm_get_barbers(session)
    if (barbers):
        for barber in barbers:
            await message.answer_photo(barber.photo,
                                       caption=f"<strong>{barber.name}</strong> \n"
                                               f"{barber.description}",
                                       reply_markup=get_menu_callback_btns(
                                           btns={f"–í—ã–±—Ä–∞—Ç—å": f"select_barbers_{barber.id}"}))
    else:
        await message.answer(text='–°–ø–∏—Å–æ–∫ –±–∞—Ä–±–µ—Ä–æ–≤ –ø—É—Å—Ç!')


@user_private_router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: types.Message):
    await message.answer(text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_kb)
